{"version":3,"sources":["components/BookShelf.js","components/HomePage.js","components/search.js","BooksAPI.js","App.js","index.js"],"names":["BookShelf","props","className","shelf","Array","isArray","books","map","book","index","style","width","height","backgroundImage","imageLinks","thumbnail","value","onChange","event","updateShelf","target","disabled","title","authors","join","HomePage","filter","to","SearchBook","prop","useEffect","emptybooks","debounceTimeout","element","type","string","searchQuery","placeholder","api","token","localStorage","Math","random","toString","substr","headers","App","useState","myReads","setMyReads","searchedBooks","setSearchedBooks","fetch","then","res","json","data","query","maxResults","method","body","JSON","stringify","BooksAPI","searchResults","error","adjustedBooks","searchResult","forEach","id","updatedBooks","currentBook","myReadsIds","b","searchedBooksIds","myNewReads","newSearchedBooks","includes","path","exact","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3a406f85.chunk.js","sourcesContent":["import React from 'react';\n//import HomePage from './HomePage';\n\nconst BookShelf = props => {\n        return (<div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">{props.shelf}</h2>\n            <div className=\"bookshelf-books\">\n                <ol className=\"books-grid\">\n                    {Array.isArray(props.books) && (\n                        props.books.map((book, index) =>\n                        <li key={index}>\n                            <div className=\"book\">\n                                <div className=\"book-top\">\n                                    <div className=\"book-cover\" style={{ width: 128, height: 170, backgroundImage: book.imageLinks ? (`url(${book.imageLinks.thumbnail})`) : (`url(https://dummyimage.com/128x170/4f4f4f/ffffff.jpg&text=No+Book+Art)`) }}></div>\n                                    <div className=\"book-shelf-changer\">\n                                        <select value={book.shelf} onChange={(event) => props.updateShelf(book, event.target.value)}> \n                                            <option disabled>Move to...</option>\n                                            <option value=\"currentlyReading\">Currently Reading</option>\n                                            <option value=\"wantToRead\">Want to Read</option>\n                                            <option value=\"read\">Read</option>\n                                            <option value=\"none\">None</option>\n                                        </select>\n                                    </div>\n                                </div>\n                                <div className=\"book-title\">{book.title}</div>\n                                <div className=\"book-authors\">{Array.isArray(book.authors) ? book.authors.join(', '): ''}</div>\n                            </div>\n                        </li>\n                    ))}\n                </ol>\n            </div>\n        </div>)\n} \n    \n\nexport default BookShelf;","import React from 'react'\nimport { Link } from 'react-router-dom'\n//import * as BooksAPI from '../BooksAPI'\nimport BookShelf from './BookShelf'\n//import SearchBook from './search'\n\nconst HomePage = props => {\n        return( <div className=\"list-books\">\n            <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n            </div>\n            <div className=\"list-books-content\">\n                <BookShelf updateShelf={props.updateShelf} shelf=\"Currently Reading\" books={props.books.filter(book => book.shelf === 'currentlyReading')} />,\n                <BookShelf updateShelf={props.updateShelf} shelf=\"Want to Read\" books={props.books.filter(book => book.shelf === 'wantToRead')} />,\n                <BookShelf updateShelf={props.updateShelf} shelf=\"Read\" books={props.books.filter(book => book.shelf === 'read')} />\n\n            </div>\n\n\n            <div className=\"open-search\">\n                <Link\n                    to=\"/search\">\n                    Add a book\n                </Link>\n            </div>\n        </div>\n        )}\n\n\nexport default HomePage;","import React , {useEffect}  from 'react'\nimport { Link } from 'react-router-dom'\nimport DebounceInput from 'react-debounce-input'\nimport BookShelf from './BookShelf'\n\nconst SearchBook = prop => {\n    useEffect(() => {\n       prop.emptybooks()\n    },[])\n        //console.log(this.state.returnedBooks)\n        return( <div className=\"search-books\">\n            <div className=\"search-books-bar\">\n\n\n                <Link\n                    className=\"close-search\"\n                    to=\"/\">\n                    Close\n                    </Link>\n                <div className=\"search-books-input-wrapper\">\n                    <DebounceInput\n                        debounceTimeout={325}\n                        element=\"input\"\n                        type=\"text\"\n                        value={prop.books.string}\n                        onChange={prop.searchQuery}\n                        placeholder=\"Search by title or author\"\n                    />\n\n                </div>\n            </div>\n            <div className=\"search-books-results\">\n                <BookShelf updateShelf={prop.updateShelf} shelf=\"Search Results\" books={prop.books} />\n            </div>\n        </div>\n        )};\n\nexport default SearchBook;","const api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\ntoken = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query, maxResults })\n  }).then(res => res.json())\n    .then(data => data.books)","import React , {useState , useEffect} from 'react'\nimport { Route } from 'react-router-dom'\nimport HomePage from './components/HomePage'\nimport SearchBook from './components/search'\nimport './css/App.css'\nimport * as BooksAPI from './BooksAPI'\nconst App = (props) => {\n    // const [state, setState] = useState({\n    //     myReads: [],\n    //     searchedBooks: []\n    // });\n    const [myReads,setMyReads] = useState([]);\n    const [searchedBooks,setSearchedBooks] = useState([])\n    //added array of books to the state\n     useEffect(()=> {\n        BooksAPI.getAll().then(myReads => {\n            setMyReads(myReads)\n        })\n    })\n    const emptybooks = () => setSearchedBooks([])\n\n    const searchQuery = (event) => {\n        const query = event.target.value\n        if (query !== '') { \n          BooksAPI.search(query).then(searchResults => {\n            if (!searchResults || searchResults.error) {\n              setSearchedBooks(query)\n              return\n            }\n            // sync books by mapping over searchResults, and\n            // iterating over this.props.books      \n            const adjustedBooks = searchResults.map(searchResult => {\n                myReads.forEach(book => {\n                if (book.id === searchResult.id) searchResult.shelf = book.shelf\n              })\n              return searchResult\n            })\n      \n            // finally, setState\n            setSearchedBooks(adjustedBooks)\n      \n          })\n        } else {\n            setSearchedBooks([])\n        }\n      }\n\n    const updateShelf = (book, shelf) => {\n        \n        if (shelf === 'none') {\n            const updatedBooks = myReads.filter(currentBook => currentBook.id !== book.id);\n        setMyReads(updatedBooks)\n        }\n        if (book.shelf !== shelf) {\n            BooksAPI.update(book, shelf).then(() => {\n                // const {myReads} = setMyReads\n                // const {searchedBooks} = setSearchedBooks\n                // const { myReads, searchedBooks } = state\n                const myReadsIds = myReads.map(b => b.id)\n                const searchedBooksIds = myReads.map(b => b.id)\n                let myNewReads = [] //if book already on shelf: reshelf; otherwise, add to myReads\n                let newSearchedBooks = []\n\n                if (myReadsIds.includes(book.id) || searchedBooksIds.includes(book.id)) {\n                    myNewReads = myReads.map(b => b.id === book.id ? { ...b, shelf } : b)\n                    newSearchedBooks = searchedBooks.map(b => b.id === book.id ? { ...b, shelf } : b)\n\n                } else {\n                    book.shelf = shelf\n                    myNewReads = [...myReads, book]\n                    newSearchedBooks = [...searchedBooks, book]\n                }\n                setMyReads(myNewReads)\n                setSearchedBooks(newSearchedBooks)\n\n            })\n        }\n    }\n\n        return (\n            <div className=\"app\">\n                <Route path=\"/search\" exact render={() => (\n                    <SearchBook emptybooks={emptybooks} searchQuery={searchQuery} updateShelf={updateShelf} books={searchedBooks} />\n                )} />\n                <Route path=\"/\" exact render={() => (\n                    <HomePage updateShelf={updateShelf} books={myReads} />\n                )} />\n\n            </div>\n        )\n    }\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from './App'\nimport './css/index.css'\n\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'))\n"],"sourceRoot":""}